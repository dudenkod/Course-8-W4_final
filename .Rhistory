install.packages("swirl")
library(swirl)
quit
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
quit
x<-1:4
y<-2:3
z<-x+y
z
class(z)
class(x)
class(y)
as.numberic(x)
as.numeric(x)
as.numeric(y)
class(y)
xx<-as.numeric(x)
yy<-as.numeric(y)
xx+yy
class(yy)
class(xx)
27976/(5328+27976)
quit
setwd("Course-8-W4/")
library(doParallel); library(parallel)
cores=detectCores()
clust = makeCluster(cores)
registerDoParallel(clust)
library(caret); library(kernlab); library(ISLR); library(RANN);
library(DMwR);library(MASS); library(randomForest); library(e1071)
train = read.csv(file="pml-training.csv", header = TRUE,  sep = ',')
test = read.csv(file="pml-testing.csv", header = TRUE,  sep = ',')
summary(train)
str(train)
str(Train_v5)
train_v1 = read.csv(file="pml-training.csv", na.strings =c("NA", "", "#DIV/0!"), header = TRUE,  sep = ',')
test_v1 = read.csv(file="pml-testing.csv", na.strings=c("NA", "", "#DIV/0!"), header = TRUE, sep = ',')
#Doing proper time formatting
train_v1$cvtd_timestamp = strptime(train_v1$cvtd_timestamp, "%d/%m/%Y %H:%M")
test_v1$cvtd_timestamp = strptime(test_v1$cvtd_timestamp, "%d/%m/%Y %H:%M")
train_v1$cvtd_timestamp = as.Date(train_v1$cvtd_timestamp)
test_v1$cvtd_timestamp = as.Date(test_v1$cvtd_timestamp)
#In this report I will not execute these four commands for the sake of size
#summary(train_v1)
#str(train_v1)
#summary(test_v1)
#str(test_v1)
```
nearzero <- nearZeroVar(train_v1, saveMetrics = TRUE)
nearzero
train_v2 <- train_v1[, !nearzero$nzv]
NA_cleanup_train =  sapply(colnames(train_v2), function(x) if(sum(is.na(train_v2[,x])) > 0.50*nrow(train_v2)) {return(TRUE)}else{return(FALSE)})
train_v3 = train_v2[,!NA_cleanup_train]
#In this report I will not execute these two commands for the sake of size
#str(train_v3)
#summary(train_v3)
#Checking if there any NA's left.
which(is.na(train_v3))
features_corr <- findCorrelation(cor(train_v3[,-c(1,2,5,59)]), cutoff=0.5)
features_corr
names(train_v3[, -c(1,2,5,59)])[features_corr]
train_v4 = train_v3[, -c(1,2,5,59)][,-features_corr]
train_v4$classe = train_v3[, 59]
str(train_v4)
table(train_v4$classe)
#It is noteworthy that the classes are not skewed, which is good
#so, we don't need to pick selectively every class...just taking random 10%
reduced_training_set = createDataPartition(y=train_v4$classe, p=0.10, list = FALSE)
inTrain = createDataPartition(y=train_v4[reduced_training_set,]$classe, p=0.75, list = FALSE)
Train_v5 = train_v4[reduced_training_set,][inTrain,]
Test_v5 = train_v4[reduced_training_set,][-inTrain,]
str(Train_v5)
PREDICTION_COURSE_TOP7 = predict(model_RF_TOP7, newdata=test_v1)
table(PRED)
bb = c('ee','tt')
cc = c('ee','ttz')
table(bb,cc)
